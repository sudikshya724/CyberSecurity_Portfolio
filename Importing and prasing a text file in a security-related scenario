Update a File Through a Python Algorithm
Project Description
In my organization, access to restricted digital content is managed through an allow list stored in a file named allow_list.txt, which contains approved IP addresses. 
To maintain this list, IP addresses that should no longer have access are stored in a separate remove list. I developed a Python algorithm to automate the process of updating the allow list
by removing any IP addresses found in the remove list.


//Task 1

import_file = "login.txt"

# First line of the `with` statement
with open(import_file, "r") as file:
    pass  # Placeholder since it's only the first line
 //Task 2
import_file = "login.txt"
with open(import_file, "r") as file:
    text = file.read()

print(text)
 //Task 3

import_file = "login.txt"

with open(import_file, "r") as file:
    text = file.read()

print(text.split("\n"))  # Or: print(text.splitlines())
Question 1 Answer:
Before using .split(), the log is one long string. After using .split("\n"), each log entry is stored as an element in a list, making it easier to analyze individual entries.

// Task 4

import_file = "login.txt"
missing_entry = "jrafael,192.168.243.140,4:56:27,2022-05-09"

with open(import_file, "a") as file:
    file.write("\n" + missing_entry)  # Appends to the end on a new line

with open(import_file, "r") as file:
    text = file.read()

print(text)
Question 2 Answer:
The missing entry was appended at the end of the file, which shows that opening the file in "a" mode adds new content without overwriting existing entries.

 //Task 5

import_file = "allow_list.txt"

ip_addresses = "192.168.218.160 192.168.97.225 192.168.145.158 192.168.108.13 192.168.60.153 192.168.96.200 192.168.247.153 192.168.3.252 192.168.116.187 192.168.15.110 192.168.39.246"

print(import_file)
print(ip_addresses)
 //Task 6
import_file = "allow_list.txt"
ip_addresses = "192.168.218.160 192.168.97.225 192.168.145.158 192.168.108.13 192.168.60.153 192.168.96.200 192.168.247.153 192.168.3.252 192.168.116.187 192.168.15.110 192.168.39.246"

with open(import_file, "w") as file:
    file.write(ip_addresses)
//Task 7

import_file = "allow_list.txt"

with open(import_file, "r") as file:
    text = file.read()

print(text)

Summary
This algorithm efficiently manages access control by automatically removing unauthorized IP addresses from the allow_list.txt file. 
The steps included:

Reading the existing allow list file.

Converting the data to a manageable list format.

Iterating through a remove_list to identify and eliminate revoked IPs.

Writing the cleaned list back to the file using Python's built-in file handling methods.

This solution helps streamline system administration and ensures that only authorized users retain access to sensitive resources.

