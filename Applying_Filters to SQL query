Use Filters in SQL Inquiries
Overview of the Project
As part of our companyâ€™s efforts to enhance system security, I was responsible for identifying potential security threats, 
updating staff PCs, and using SQL queries to retrieve specific information from the database.

I used the following schema:

log_in_attempts(user_id, login_date, login_time, success, country)

employees(employee_id, name, department, office)

Below are examples of how I applied SQL filters to perform my security and operations-related tasks.

1. Recover Unsuccessful Login Attempts After Business Hours
To investigate failed login attempts after 6:00 PM, I used the following query:


SELECT *
FROM log_in_attempts
WHERE login_time > '18:00'
  AND success = FALSE;
login_time > '18:00' filters attempts outside business hours.

success = FALSE isolates failed attempts.

2. Get Login Attempts for Specific Dates
To analyze activity on 2022-05-09 and the day before:


SELECT *
FROM log_in_attempts
WHERE login_date = '2022-05-09'
   OR login_date = '2022-05-08';
This helped gather all relevant data for further investigation.

3. Get Attempts to Login from Outside Mexico
To find access attempts from countries other than Mexico:


SELECT *
FROM log_in_attempts
WHERE country NOT LIKE 'MEX%';
LIKE 'MEX%' matches variations like "MEX", "MEXICO", etc.

NOT excludes them.

4. Get Marketing Department Staff in the East Building
To prepare for an upgrade specific to this group:


SELECT *
FROM employees
WHERE department = 'Marketing'
  AND office LIKE 'East%';
This identifies Marketing staff located in offices beginning with "East".

5. Obtain Workers in the Sales or Finance Divisions
To retrieve all employees from either department:


SELECT *
FROM employees
WHERE department = 'Finance'
   OR department = 'Sales';
This ensured the inclusion of both departments in the results.

6. Get Workers Not in the Information Technology Department
To exclude IT staff from a particular update:


SELECT *
FROM employees
WHERE department != 'Information Technology';
!= or <> works to exclude a specific value.

In Brief
Throughout this project, I applied SQL filters aligned with our operational and security goals. 
By leveraging logical operators (AND, OR, NOT), pattern matching (LIKE, %), and conditional filtering on dates, times, and text values, 
I was able to:

Identify suspicious login attempts

Isolate relevant employee groups

Enhance the security posture of our organization

